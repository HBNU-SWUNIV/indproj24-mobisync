// dd Ïä§ÌÉÄÏùºÏùò ÏÇ¨Ïö©Ïûê ÏûÖÎßõ ÏÑ§Ï†ï ÌéòÏù¥ÏßÄ
import React, { useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, SafeAreaView } from 'react-native';

export default function IntroNew({ navigation }) {
  const [currentStep, setCurrentStep] = useState(0);
  const [preferences, setPreferences] = useState({
    spiciness: null,
    flavor: null,
    cuisine: null,
  });

  const questions = [
    {
      id: 'spiciness',
      title: 'Îß§Ïö¥Îßõ ÏÑ†Ìò∏ÎèÑ',
      question: 'Îß§Ïö¥ ÏùåÏãùÏùÑ Ïñ¥Îäê Ï†ïÎèÑ Ï¢ãÏïÑÌïòÏãúÎÇòÏöî?',
      emoji: 'üå∂Ô∏è',
      options: [
        { value: 'mild', label: 'Ï†ÑÌòÄ Ïïà Îß§Ïö¥ Í≤É', emoji: 'üòå', description: 'ÏàúÌïú ÎßõÎßå Í¥úÏ∞ÆÏïÑÏöî' },
        { value: 'medium', label: 'Ï†ÅÎãπÌûà Îß§Ïö¥ Í≤É', emoji: 'üòä', description: 'Î≥¥ÌÜµ Ï†ïÎèÑÏùò Îß§Ïö¥Îßõ' },
        { value: 'spicy', label: 'Îß§Ïö¥ Í≤É', emoji: 'üòã', description: 'Îß§Ïö¥ ÏùåÏãùÏùÑ Ï¢ãÏïÑÌï¥Ïöî' },
        { value: 'very_spicy', label: 'ÏïÑÏ£º Îß§Ïö¥ Í≤É', emoji: 'üî•', description: 'Îß§Ïö∏ÏàòÎ°ù Ï¢ãÏïÑÏöî!' }
      ]
    },
    {
      id: 'flavor',
      title: 'Îßõ ÏÑ†Ìò∏ÎèÑ',
      question: 'Ïñ¥Îñ§ ÎßõÏùÑ Í∞ÄÏû• ÏÑ†Ìò∏ÌïòÏãúÎÇòÏöî?',
      emoji: 'üëÖ',
      options: [
        { value: 'sweet', label: 'Îã¨ÏΩ§Ìïú Îßõ', emoji: 'üçØ', description: 'Îã®ÎßõÏù¥ ÎÇòÎäî ÏùåÏãù' },
        { value: 'salty', label: 'Ïß≠Ïß§Ìïú Îßõ', emoji: 'üßÇ', description: 'Ïß†ÎßõÏù¥ Í∞ïÌïú ÏùåÏãù' },
        { value: 'sour', label: 'Ïã†Îßõ', emoji: 'üçã', description: 'ÏÉàÏΩ§Ìïú ÎßõÏùò ÏùåÏãù' },
        { value: 'umami', label: 'Í∞êÏπ†Îßõ', emoji: 'üçÑ', description: 'ÍπäÍ≥† ÏßÑÌïú ÎßõÏùò ÏùåÏãù' }
      ]
    },
    {
      id: 'cuisine',
      title: 'ÏöîÎ¶¨ ÏÑ†Ìò∏ÎèÑ',
      question: 'ÌèâÏÜå Ïñ¥Îñ§ ÏöîÎ¶¨Î•º Í∞ÄÏû• Ï¢ãÏïÑÌïòÏãúÎÇòÏöî?',
      emoji: 'üçΩÔ∏è',
      options: [
        { value: 'korean', label: 'ÌïúÏãù', emoji: 'üçö', description: 'ÍπÄÏπò, Î∂àÍ≥†Í∏∞, ÎπÑÎπîÎ∞• Îì±' },
        { value: 'chinese', label: 'Ï§ëÏãù', emoji: 'ü•ü', description: 'ÏßúÏû•Î©¥, ÌÉïÏàòÏú°, ÎßåÎëê Îì±' },
        { value: 'western', label: 'ÏñëÏãù', emoji: 'üçù', description: 'ÌååÏä§ÌÉÄ, Ïä§ÌÖåÏù¥ÌÅ¨, ÌîºÏûê Îì±' },
        { value: 'japanese', label: 'ÏùºÏãù', emoji: 'üç£', description: 'Ï¥àÎ∞•, ÎùºÎ©ò, ÎèàÏπ¥Ï∏† Îì±' }
      ]
    }
  ];

  const handleOptionSelect = (optionValue) => {
    const currentQuestion = questions[currentStep];
    setPreferences(prev => ({
      ...prev,
      [currentQuestion.id]: optionValue
    }));

    if (currentStep < questions.length - 1) {
      setTimeout(() => {
        setCurrentStep(currentStep + 1);
      }, 300);
    } else {
      setTimeout(() => {
        handleCompletePreferences();
      }, 500);
    }
  };

  const handleCompletePreferences = () => {
    console.log('ÏûÖÎßõ ÏÑ§Ï†ï ÏôÑÎ£å:', preferences);
    navigation.replace('Home');
  };

  const currentQuestion = questions[currentStep];

  return (
    <SafeAreaView style={styles.container}>
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <Text style={styles.welcomeText}>ÎßûÏ∂§ Ï∂îÏ≤úÏùÑ ÏúÑÌïú</Text>
        <Text style={styles.welcomeSubtext}>ÏûÖÎßõ ÏÑ§Ï†ï</Text>
      </View>

      {/* ÏßÑÌñâ ÏÉÅÌô© */}
      <View style={styles.progressContainer}>
        <Text style={styles.progressText}>
          {currentStep + 1} / {questions.length}
        </Text>
        <View style={styles.progressBar}>
          <View 
            style={[
              styles.progressFill, 
              { width: `${((currentStep + 1) / questions.length) * 100}%` }
            ]} 
          />
        </View>
      </View>

      {/* ÏßàÎ¨∏ ÏÑπÏÖò */}
      <View style={styles.questionSection}>
        <Text style={styles.questionEmoji}>{currentQuestion.emoji}</Text>
        <Text style={styles.questionCategory}>{currentQuestion.title}</Text>
        <Text style={styles.questionText}>{currentQuestion.question}</Text>
      </View>

      {/* ÏòµÏÖòÎì§ */}
      <View style={styles.optionsContainer}>
        {currentQuestion.options.map((option, index) => {
          const isSelected = preferences[currentQuestion.id] === option.value;
          
          return (
            <TouchableOpacity
              key={index}
              style={[
                styles.optionButton,
                isSelected && styles.optionButtonSelected
              ]}
              onPress={() => handleOptionSelect(option.value)}
              activeOpacity={0.7}
            >
              <View style={styles.optionContent}>
                <Text style={styles.optionEmoji}>{option.emoji}</Text>
                <View style={styles.optionTextContainer}>
                  <Text style={[
                    styles.optionLabel,
                    isSelected && styles.optionLabelSelected
                  ]}>
                    {option.label}
                  </Text>
                  <Text style={[
                    styles.optionDescription,
                    isSelected && styles.optionDescriptionSelected
                  ]}>
                    {option.description}
                  </Text>
                </View>
              </View>
              
              {isSelected && (
                <View style={styles.checkIcon}>
                  <Text style={styles.checkText}>‚úì</Text>
                </View>
              )}
            </TouchableOpacity>
          );
        })}
      </View>

      {/* Ïù¥Ï†Ñ Î≤ÑÌäº */}
      {currentStep > 0 && (
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => setCurrentStep(currentStep - 1)}
        >
          <Text style={styles.backButtonText}>‚Üê Ïù¥Ï†Ñ</Text>
        </TouchableOpacity>
      )}

      {/* ÌïòÎã® ÏïàÎÇ¥ */}
      <View style={styles.bottomInfo}>
        <Text style={styles.bottomInfoText}>
          ÏÑ†ÌÉùÌïòÏã† Ï†ïÎ≥¥Îäî ÎßûÏ∂§ ÏùåÏãùÏ†ê Ï∂îÏ≤úÏóê ÌôúÏö©Îê©ÎãàÎã§
        </Text>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
    paddingHorizontal: 20,
  },
  header: {
    alignItems: 'center',
    paddingTop: 40,
    paddingBottom: 20,
  },
  welcomeText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 4,
    textAlign: 'center',
  },
  welcomeSubtext: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#8b5cf6',
    textAlign: 'center',
  },
  progressContainer: {
    marginBottom: 40,
  },
  progressText: {
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 12,
    color: '#8b5cf6',
    fontWeight: '500',
  },
  progressBar: {
    height: 8,
    backgroundColor: '#f3f4f6',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#8b5cf6',
    borderRadius: 4,
  },
  questionSection: {
    alignItems: 'center',
    marginBottom: 40,
  },
  questionEmoji: {
    fontSize: 48,
    marginBottom: 16,
  },
  questionCategory: {
    fontSize: 16,
    color: '#8b5cf6',
    fontWeight: '600',
    marginBottom: 8,
  },
  questionText: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#111827',
    lineHeight: 28,
  },
  optionsContainer: {
    flex: 1,
    gap: 12,
  },
  optionButton: {
    backgroundColor: '#ffffff',
    borderWidth: 2,
    borderColor: '#e5e7eb',
    borderRadius: 16,
    paddingVertical: 20,
    paddingHorizontal: 20,
    position: 'relative',
  },
  optionButtonSelected: {
    borderColor: '#8b5cf6',
    backgroundColor: '#faf5ff',
  },
  optionContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  optionEmoji: {
    fontSize: 24,
    marginRight: 16,
  },
  optionTextContainer: {
    flex: 1,
  },
  optionLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 4,
  },
  optionLabelSelected: {
    color: '#8b5cf6',
  },
  optionDescription: {
    fontSize: 14,
    color: '#6b7280',
  },
  optionDescriptionSelected: {
    color: '#8b5cf6',
  },
  checkIcon: {
    position: 'absolute',
    top: 12,
    right: 16,
    width: 24,
    height: 24,
    backgroundColor: '#8b5cf6',
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  backButton: {
    paddingVertical: 16,
    alignItems: 'center',
  },
  backButtonText: {
    fontSize: 16,
    color: '#8b5cf6',
    fontWeight: '500',
  },
  bottomInfo: {
    alignItems: 'center',
    paddingVertical: 20,
  },
  bottomInfoText: {
    fontSize: 12,
    color: '#9ca3af',
    textAlign: 'center',
  },
});